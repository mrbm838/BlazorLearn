@page "/checkout"
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject HttpClient HttpClient

<div class="top-bar">
    <a class="logo" href="">
        <img src="img/logo.svg" />
    </a>

    <NavLink href="" class="nav-tab" Match="NavLinkMatch.All">
        <img src="img/pizza-slice.svg" />
        <div>Get Pizza</div>
    </NavLink>

    <NavLink href="myorders" class="nav-tab">
        <img src="img/bike.svg" />
        <div>My Orders</div>
    </NavLink>
</div>

<div class="main">
    <div class="checkou-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            @foreach (var pizza in Order.Pizzas)
            {
                <p><strong>
                    @(pizza.Size)"
                    @pizza.Special.Name
                    (£@pizza.GetFormattedTotalPrice())
                </strong></p>
            }
            <p><strong>
                Total price: £@Order.GetFormattedTotalPrice()
            </strong></p>
        </div>
    </div>

    <button class=checkout-button btn btn-warning @onclick=PlaceOrder disabled=@isSubmitting> Place order</button>
</div>

@code {
    private Order Order => OrderState.Order;

    private bool isSubmitting = false;

    private async Task PlaceOrder()
    {
        isSubmitting = true;

        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}orders", Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();

        if (response.IsSuccessStatusCode)
        {
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"/myorders/{newOrderId}");
        }

        isSubmitting = false;
    }
}